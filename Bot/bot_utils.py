import asyncio

from aiogram import Bot, Dispatcher, types, F
from aiogram.types import Message, CallbackQuery, InputMedia, ReplyKeyboardRemove
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.filters import CommandStart
from aiogram.utils.media_group import MediaGroupBuilder
import random

import json 

from kino_parse.kino import Film
from kino_parse.kino import create_str_list
from kino_parse.collections import get_collections
from kino_parse.database_fun import *
from victoria_secret import TOKEN

from bot_items import AddFillter, CollFilter, film_kb, Pagination, paginator
from bot_commands import set_commands


bot = Bot(TOKEN, parse_mode='HTML')
dp = Dispatcher()


 # –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª /start
@dp.message(CommandStart())
async def start(message: Message):
    await set_commands(bot)
    await message.answer(f"–ü—Ä–∏–≤–µ—Ç, <b>{message.from_user.first_name}</b>! \n–ù–∞–ø–∏—à–∏ –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞–¥–æ –Ω–∞–π—Ç–∏.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π 
@dp.message(AddFillter())
async def additional_info(message: Message):
    request = message.text
    db_film_name = get_movie(str(message.from_user.username))
    film = Film(db_film_name)

    if request == "–û–ø–∏—Å–∞–Ω–∏–µ":
        ans = f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {film.get_description()}"
    elif request == "–†–µ–∂–∏—Å—Å–µ—Ä—ã":
        directors = ", ".join(film.get_directors())
        ans = f"<b>–†–µ–∂–∏—Å—Å–µ—Ä—ã:</b> {directors}"
    elif request == "–ì–ª–∞–≤–Ω—ã–µ –∞–∫—Ç–µ—Ä—ã":
        main_actors = ", ".join(film.get_actors())
        ans = f"<b>–ì–ª–∞–≤–Ω—ã–µ –∞–∫—Ç–µ—Ä—ã:</b> {main_actors}"
    else:
        if film.get_seasons() != None:
            ans = f"<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∑–æ–Ω–æ–≤:</b> {film.get_seasons()}"
        else:
            ans = '–°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ —ç—Ç–æ —Ñ–∏–ª—å–º –∏–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –±—ã–ª–∞ –Ω–∞–π–¥–µ–Ω–∞ :('  

    await message.answer(ans)
    await message.answer("–ß—Ç–æ-—Ç–æ –µ—â—ë?", reply_markup=film_kb)


# –ü–æ–¥–±–æ—Ä–∫–∞ –Ω–æ–≤–æ–≥–æ–¥–Ω–∏—Ö —Ñ–∏–ª—å–º–æ–≤ —á–µ—Ä–µ–∑ –ø–∞–≥–∏–Ω–∞—Ü–∏—é
@dp.callback_query(Pagination.filter(F.action.in_(["prev", "next"])))
async def pagination_handler(call: CallbackQuery, callback_data: Pagination):
    coll_name = callback_data.name
    if coll_name == "top":
        file_name= "Bot/movies.json"
    else:
        file_name = "Bot/collections.json"
    
    with open(file_name, encoding='utf-8') as json_data:
        data = json.load(json_data)
    
    page_num = int(callback_data.page)
    page = (page_num + len(data[coll_name]) - 1) % len(data[coll_name])

    if callback_data.action == "next":
        page = (page_num + 1) % len(data[coll_name])

    file = types.InputMediaPhoto(media=data[coll_name][page]['img'], caption=data[coll_name][page]['name'])
    await call.message.edit_media(media = file, reply_markup=paginator(page, coll_name))


@dp.message(F.text == "/omg")
async def top(message: Message):
    json_file = 'Bot/movies.json'
    with open(json_file, encoding='utf-8') as json_data:
            data = json.load(json_data)
    file = data['top'][0]['img']

    await message.answer("Happy New Year, honey :)", reply_markup=ReplyKeyboardRemove())
    
    await bot.send_photo(
        message.chat.id,
        photo=file,
        reply_markup=paginator(0,'top'),
        caption=data['top'][0]['name'],
    )

@dp.message(F.text == '/collections')
async def get_names(message: Message):
    await message.answer("–£ –º–µ–Ω—è –µ—Å—Ç—å —Ç–∞–∫–∏–µ –ø–æ–¥–±–æ—Ä–∫–∏, –≤—ã–±–µ—Ä–∏ –∫–æ–º–∞–Ω–¥—É –∏ –Ω–∞–ø–∏—à–∏ –µ—ë –º–Ω–µ: \n \
/anti_stress - –ü–æ–¥–±–æ—Ä–∫–∞ –¥–æ–±—Ä–æ–≥–æ —Ä–∞—Å—Å–ª–∞–±–ª—è—é—â–µ–≥–æ –∫–∏–Ω–æ \n \
/soviet - –ü–æ–¥–±–æ—Ä–∫–∞ —Å–æ–≤–µ—Ç—Å–∫–æ–≥–æ –∫–∏–Ω–æ \n \
/holiday - –ü–æ–¥–±–æ—Ä–∫–∞ –Ω–æ–≤–æ–≥–æ–¥–Ω–∏—Ö —Ñ–∏–ª—å–º–æ–≤ \n \
/puzzle - –ü–æ–¥–±–æ—Ä–∫–∞ —Ñ–∏–ª—å–º–æ–≤ –≥–æ–ª–æ–≤–æ–ª–æ–º–æ–∫ \n \
/oscar - –ü–æ–¥–±–æ—Ä–∫–∞ —Ñ–∏–ª—å–º–æ–≤ —Å –ø—Ä–µ–º–∏–µ–π –æ—Å–∫–∞—Ä \n \
/animals - –ü–æ–¥–±–æ—Ä–∫–∞ —Ñ–∏–ª—å–º–æ–≤ –ø—Ä–æ –∂–∏–≤–æ—Ç–Ω—ã—Ö \n \
/women - –ü–æ–¥–±–æ—Ä–∫–∞ —Ñ–∏–ª—å–º–æ–≤ –æ —Å–∏–ª—å–Ω—ã—Ö –∂–µ–Ω—â–∏–Ω–∞—Ö \n \
/middle_age - –ü–æ–¥–±–æ—Ä–∫–∞ —Ñ–∏–ª—å–º–æ–≤ –æ —Å—Ä–µ–¥–Ω–µ–≤–µ–∫–æ–≤—å–µ")


# –ü–æ–¥–±–æ—Ä–∫–∞ —Ñ–∏–ª—å–º–æ–≤ —Å—Ä–∞–∑—É –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
@dp.message(F.text == "/last")
async def top_movies(message: Message):

    json_file = 'Bot/movies.json'

    with open(json_file, encoding="utf-8") as json_data:
        data = json.load(json_data)

        caption = "<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b>"

    for i in range(len(data['top'])):
        caption += "\n" + str(i + 1) + ". " + data['top'][i]['name']

    
    album_builder = MediaGroupBuilder(
        caption=caption
    )

    for e in data['top']:
        album_builder.add(
            type = "photo",
            media=e['img']

        )
    await message.answer("Happy New Year, honey :)", reply_markup=ReplyKeyboardRemove())
    
    await message.answer_media_group(
        media=album_builder.build()
    )

@dp.message(F.text == "üò°")
async def top(message: Message):
    await message.answer("–í—ã —É –º–µ–Ω—è —Å–∞–º—ã–µ –ª—É—á—à–∏–µ!")

# –ü–æ—Å–æ–≤–µ—Ç–æ–≤–∞—Ç—å —Ñ–∏–ª—å–º –∏–∑ –ø–æ–¥–±–æ—Ä–∫–∏ —Ç–æ–ø-250 –ª—É—á—à–∏—Ö
@dp.message(F.text == "/random")
async def random_from_top(message: Message):

    json_file = 'Bot/top_250_movies.json'

    film_index = random.randint(0, 249)

    with open(json_file, encoding="utf-8") as json_data:
        data = json.load(json_data)

    random_film_name = data['top_250_films'][film_index]
    
    await message.answer("–í–æ—Ç —Å–ª—É—á–∞–π–Ω—ã–π —Ñ–∏–ª—å–º:", reply_markup=ReplyKeyboardRemove())
    object.__setattr__(message, "text", random_film_name)
    await echo(message)
# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–¥–±–æ—Ä–∫–∏
    
@dp.message(CollFilter())
async def get_collection(message: Message):
    request = message.text
    get_collections(request[1:])
    collections = 'Bot/collections.json'
    with open(collections, encoding='utf-8') as json_data:
        coll_data = json.load(json_data)

    if request == "/anti_stress":
        coll = "anti_stress"
        name = coll_data[coll][0]['name']
        img = coll_data[coll][0]['img']       
    elif request == "/soviet":
        coll = "soviet"
        name = coll_data[coll][0]['name']
        img = coll_data[coll][0]['img']     
    elif request == "/holiday":
        coll = "holiday"
        name = coll_data[coll][0]['name']
        img = coll_data[coll][0]['img']
    elif request == "/puzzle":
        coll = "puzzle"
        name = coll_data[coll][0]['name']
        img = coll_data[coll][0]['img']
    elif request == "/oscar":
        coll = "oscar"
        name = coll_data[coll][0]['name']
        img = coll_data[coll][0]['img']
    elif request == "/animals":
        coll = "animals"
        name = coll_data[coll][0]['name']
        img = coll_data[coll][0]['img']
    elif request == "/women":
        coll = "women"
        name = coll_data[coll][0]['name']
        img = coll_data[coll][0]['img']
    else:
        coll = "middle_age"
        name = coll_data[coll][0]['name']
        img = coll_data[coll][0]['img']


    await message.answer("–í–∞—à–∞ –ø–æ–¥–±–æ—Ä–∫–∞: ")
    await bot.send_photo(
    message.chat.id,
    photo=img,
    reply_markup=paginator(0, coll),
    caption=coll_data[coll][0]['name'],
)

        
# –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –ø—Ä–∏ –≤–≤–æ–¥–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ–∏–ª—å–º–∞
@dp.message()
async def echo(message: Message):
    film = Film(message.text)
    user_name = str(message.from_user.username)
    film_name = film.get_name()

    if film_name is not None:
        if user_exists(user_name):
            user_update(user_name, film_name)
        else:
            user_add(user_name, film_name)


    if film_name is None:
        await message.answer("–ù–µ –Ω–∞–π–¥–µ–Ω–æ :(")
    else:
        youtube_link = film.youtube_parser()
        urlkb = InlineKeyboardBuilder()
        
        ivi_rating, ivi_link = film.get_ivi_info()
        if ivi_link is not None:
            urlkb.add(types.InlineKeyboardButton(text="ivi", url =str(ivi_link)))
        

        urlkb.add(types.InlineKeyboardButton(text="kinopoisk", url=str(film.get_kinopoisk_url())))
        urlkb.add(types.InlineKeyboardButton(text= "youtube", url = str(youtube_link)))

        zona_link = film.zona_parser()
        if zona_link is not None:
            urlkb.add(types.InlineKeyboardButton(text="zona", url =str(zona_link)))

        anime_link = film.anime_parser()
        if anime_link is not None:
            urlkb.add(types.InlineKeyboardButton(text="anime", url =str(anime_link)))

        other_films_by_request = create_str_list(message.text)
        question = '–í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –∏—Å–∫–∞–ª–∏ –∫–∞–∫–æ–π-—Ç–æ –∏–∑ —ç—Ç–∏—Ö —Ñ–∏–ª—å–º–æ–≤?\n\n' + other_films_by_request
        
        ans = '<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {} \n<b>–ì–æ–¥ —Å–æ–∑–¥–∞–Ω–∏—è:</b> {} \n<b>–†–µ–π—Ç–∏–Ω–≥:</b> kinopoisk {} \ ivi  {}\n<b>–°—Ç—Ä–∞–Ω–∞:</b> {} \n<b>–í–æ–∑—Ä–∞—Å—Ç:</b> {}'.format(film_name, 
            film.get_year(), film.get_rating(), ivi_rating, ', '.join(film.get_country()), film.get_age())
        await bot.send_photo(chat_id=message.chat.id, photo=film.get_poster_url(), caption=ans, reply_markup=urlkb.as_markup())
        await message.answer(question)
        await message.answer("–ß—Ç–æ-—Ç–æ –µ—â—ë?", reply_markup=film_kb)

    



async def main():
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
