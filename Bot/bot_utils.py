import asyncio

from aiogram import Bot, Dispatcher, types, F
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.filters import CommandStart
import random

import json 

from kino_parse.kino import Film
from kino_parse.collections import get_collections
from kino_parse.database_fun import *
from kino_parse.fichi import create_str_list
from victoria_secret import TOKEN

from bot_items import AddFillter, CollFilter, film_kb, Pagination, paginator
from bot_commands import set_commands
from logger import bot_logger


bot = Bot(TOKEN, parse_mode='HTML')
dp = Dispatcher()


 # –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª /start
@dp.message(CommandStart())
async def start(message: Message):
    '''
    –§—É–Ω–∫—Ü–∏—è, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–∞—è –∫–æ–º–∞–Ω–¥—É /start.

    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    message (Message): –û–±—ä–µ–∫—Ç, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–æ–±—â–µ–Ω–∏–∏.

    –û–ø–∏—Å–∞–Ω–∏–µ:
    –§—É–Ω–∫—Ü–∏—è –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã /start. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø—Ä–æ—Å–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞.

    –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
    >> start(message)
    '''
    bot_logger.info(f'User {message.from_user.id} started the bot and updated collections')
    await set_commands(bot)
    await message.answer(f"–ü—Ä–∏–≤–µ—Ç, <b>{message.from_user.first_name}</b>! \n–ù–∞–ø–∏—à–∏ –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞–¥–æ –Ω–∞–π—Ç–∏.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π 
@dp.message(AddFillter())
async def additional_info(message: Message):
    ''''
    –§—É–Ω–∫—Ü–∏—è, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–∞—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∏–ª—å–º–µ.

    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    message (Message): –û–±—ä–µ–∫—Ç, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–æ–±—â–µ–Ω–∏–∏.

    –û–ø–∏—Å–∞–Ω–∏–µ:
    –§—É–Ω–∫—Ü–∏—è –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∏–ª—å–º–µ: –û–ø–∏—Å–∞–Ω–∏–µ, –†–µ–∂–∏—Å—Å–µ—Ä—ã, –ì–ª–∞–≤–Ω—ã–µ –∞–∫—Ç–µ—Ä—ã, –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∑–æ–Ω–æ–≤. 
    –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∑–∞–ø—Ä–æ—Å–∞, —Ñ—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∏–ª—å–º–µ, –≤–∑—è—Ç—É—é —Å –ø–æ–º–æ—â—å—é —Å–æ–æ—Ç–≤–µ—Å—Ç–≤—É—é—â–µ–≥–æ –º–µ—Ç–æ–¥–∞ –∫–ª–∞—Å—Å–∞ Film.
    '''
    request = message.text
    db_film_name = get_movie(str(message.from_user.username))
    film = Film(db_film_name)
    if db_film_name:
        if request == "–û–ø–∏—Å–∞–Ω–∏–µ":
            ans = f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {film.get_description()}"
        elif request == "–†–µ–∂–∏—Å—Å–µ—Ä—ã":
            directors = ", ".join(film.get_directors())
            ans = f"<b>–†–µ–∂–∏—Å—Å–µ—Ä—ã:</b> {directors}"
        elif request == "–ì–ª–∞–≤–Ω—ã–µ –∞–∫—Ç–µ—Ä—ã":
            main_actors = ", ".join(film.get_actors())
            ans = f"<b>–ì–ª–∞–≤–Ω—ã–µ –∞–∫—Ç–µ—Ä—ã:</b> {main_actors}"
        else:
            if film.get_seasons() != None:
                ans = f"<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∑–æ–Ω–æ–≤:</b> {film.get_seasons()}"
            else:
                ans = '–°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ —ç—Ç–æ —Ñ–∏–ª—å–º –∏–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –±—ã–ª–∞ –Ω–∞–π–¥–µ–Ω–∞ :('
    elif (request == "–†–µ–∂–∏—Å—Å–µ—Ä—ã"):
        ans = "–†–µ–∂–∏—Å—Å–µ—Ä —Ñ–∏–ª—å–º–∞ None –≠–¥–≥–∞—Ä –°–∞–Ω –•—É–∞–Ω :)"
    else:
        ans = "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –±—ã–ª–∞ –Ω–∞–π–¥–µ–Ω–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞"  
    
    bot_logger.debug(f'Sent request {request.lower()} for the film {db_film_name}')
    await message.answer(ans)
    await message.answer("–ß—Ç–æ-—Ç–æ –µ—â—ë?", reply_markup=film_kb)


# –ü–æ–¥–±–æ—Ä–∫–∞ –Ω–æ–≤–æ–≥–æ–¥–Ω–∏—Ö —Ñ–∏–ª—å–º–æ–≤ —á–µ—Ä–µ–∑ –ø–∞–≥–∏–Ω–∞—Ü–∏—é
@dp.callback_query(Pagination.filter(F.action.in_(["prev", "next"])))
async def pagination_handler(call: CallbackQuery, callback_data: Pagination):
    '''
    –§—É–Ω–∫—Ü–∏—è, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–∞—è –∑–∞–ø—Ä–æ—Å—ã –ø–∞–≥–∏–Ω–∞—Ü–∏–∏.

    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    call (CallbackQuery): –û–±—ä–µ–∫—Ç, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–∑–æ–≤–µ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.
    callback_data (Pagination): –û–±—ä–µ–∫—Ç, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∞–Ω–Ω—ã—Ö –ø–∞–≥–∏–Ω–∞—Ü–∏–∏.

    –û–ø–∏—Å–∞–Ω–∏–µ:
    –§—É–Ω–∫—Ü–∏—è –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏—é —Å–ø–∏—Å–∫–∞ —Ñ–∏–ª—å–º–æ–≤. –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–µ–π—Å—Ç–≤–∏—è (–ø—Ä–µ–¥—ã–¥—É—â–∞—è –∏–ª–∏ —Å–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞), 
    —Ñ—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª—è–µ—Ç –≤—ã–≤–æ–¥–∏–º–æ–µ –Ω–∞ —ç–∫—Ä–∞–Ω–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞ —Å –ø–æ–º–æ—â—å—é –º–µ—Ç–æ–¥–∞ edit_media –æ–±—ä–µ–∫—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è.
    '''
    coll_name = callback_data.name
    if coll_name == "top":
        file_name= "Bot/movies.json"
    else:
        file_name = "Bot/collections.json"

    
    with open(file_name, encoding='utf-8') as json_data:
        data = json.load(json_data)
    
    page_num = int(callback_data.page)
    page = (page_num + len(data[coll_name]) - 1) % len(data[coll_name])

    if callback_data.action == "next":
        page = (page_num + 1) % len(data[coll_name])

    file = types.InputMediaPhoto(media=data[coll_name][page]['img'], caption=data[coll_name][page]['name'])
    await call.message.edit_media(media = file, reply_markup=paginator(page, coll_name))


@dp.message(F.text == "/omg")
async def top(message: Message):
    '''
    –§—É–Ω–∫—Ü–∏—è-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã "/omg".
    
    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    message: Message - –ü–æ–ª—É—á–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    –û–ø–∏—Å–∞–Ω–∏–µ: 
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Å –ø–æ–¥–ø–∏—Å—å—é –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –ø–∞–≥–∏–Ω–∞—Ü–∏–∏.
    '''

    bot_logger.info("Received a message /omg")
    json_file = 'Bot/movies.json'
    with open(json_file, encoding='utf-8') as json_data:
            data = json.load(json_data)
    file = data['top'][0]['img']

    await message.answer("Happy New Year, honey :)", reply_markup=ReplyKeyboardRemove())
    bot_logger.debug("Sent a special collection with pagination")    
    await bot.send_photo(
        message.chat.id,
        photo=file,
        reply_markup=paginator(0,'top'),
        caption=data['top'][0]['name'],
    )

@dp.message(F.text == '/collections')
async def get_names(message: Message):
    '''
    –§—É–Ω–∫—Ü–∏—è-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã "/collections".
    
    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    message: Message - –ü–æ–ª—É—á–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    –û–ø–∏—Å–∞–Ω–∏–µ: 
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–¥–±–æ—Ä–æ–∫ —Ñ–∏–ª—å–º–æ–≤.
    '''
    bot_logger.info("Received a message /collections and sent info")
    await message.answer("–£ –º–µ–Ω—è –µ—Å—Ç—å —Ç–∞–∫–∏–µ –ø–æ–¥–±–æ—Ä–∫–∏, –≤—ã–±–µ—Ä–∏ –∫–æ–º–∞–Ω–¥—É –∏ –Ω–∞–ø–∏—à–∏ –µ—ë –º–Ω–µ: \n /anti_stress - –ü–æ–¥–±–æ—Ä–∫–∞ –¥–æ–±—Ä–æ–≥–æ —Ä–∞—Å—Å–ª–∞–±–ª—è—é—â–µ–≥–æ –∫–∏–Ω–æ \n \
/soviet - –ü–æ–¥–±–æ—Ä–∫–∞ —Å–æ–≤–µ—Ç—Å–∫–æ–≥–æ –∫–∏–Ω–æ \n /holiday - –ü–æ–¥–±–æ—Ä–∫–∞ –Ω–æ–≤–æ–≥–æ–¥–Ω–∏—Ö —Ñ–∏–ª—å–º–æ–≤ \n /puzzle - –ü–æ–¥–±–æ—Ä–∫–∞ —Ñ–∏–ª—å–º–æ–≤ –≥–æ–ª–æ–≤–æ–ª–æ–º–æ–∫ \n /oscar - –ü–æ–¥–±–æ—Ä–∫–∞ —Ñ–∏–ª—å–º–æ–≤ —Å –ø—Ä–µ–º–∏–µ–π –æ—Å–∫–∞—Ä \n \
/animals - –ü–æ–¥–±–æ—Ä–∫–∞ —Ñ–∏–ª—å–º–æ–≤ –ø—Ä–æ –∂–∏–≤–æ—Ç–Ω—ã—Ö \n /women - –ü–æ–¥–±–æ—Ä–∫–∞ —Ñ–∏–ª—å–º–æ–≤ –æ —Å–∏–ª—å–Ω—ã—Ö –∂–µ–Ω—â–∏–Ω–∞—Ö \n /middle_age - –ü–æ–¥–±–æ—Ä–∫–∞ —Ñ–∏–ª—å–º–æ–≤ –æ —Å—Ä–µ–¥–Ω–µ–≤–µ–∫–æ–≤—å–µ \n \
/passion - –ü–æ–¥–±–æ—Ä–∫–∞ —Ñ–∏–ª—å–º–æ–≤ —Å –∏–∑—é–º–∏–Ω–∫–æ–π, \n /omg - –ù–∞—à–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ø–æ–¥–±–æ—Ä–∫–∞") 


@dp.message(F.text == "üò°")
async def top(message: Message):
    bot_logger.info("Received a special message and sent a secret response")
    await message.answer("–í—ã —É –º–µ–Ω—è —Å–∞–º—ã–µ –ª—É—á—à–∏–µ!")




@dp.message(F.text == "/random")
async def random_from_top(message: Message):
    '''
    –§—É–Ω–∫—Ü–∏—è-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã "/random".
    
    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    message: Message - –ü–æ–ª—É—á–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    –û–ø–∏—Å–∞–Ω–∏–µ: 
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–ª—É—á–∞–π–Ω—ã–π —Ñ–∏–ª—å–º –∏–∑ —Ç–æ–ø-250.
    '''
    bot_logger.debug("Received a /random message")
    json_file = 'Bot/top_250_movies.json'

    film_index = random.randint(0, 249)

    with open(json_file, encoding="utf-8") as json_data:
        data = json.load(json_data)

    random_film_name = data['top_250_films'][film_index]
    
    await message.answer("–í–æ—Ç —Å–ª—É—á–∞–π–Ω—ã–π —Ñ–∏–ª—å–º:", reply_markup=ReplyKeyboardRemove())
    object.__setattr__(message, "text", '/random' + random_film_name)
    await echo(message)



    
@dp.message(CollFilter())
async def get_collection(message: Message):
    '''
    –§—É–Ω–∫—Ü–∏—è-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–±–æ—Ä–∫–∏.
    
    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    message: Message - –ü–æ–ª—É—á–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    –û–ø–∏—Å–∞–Ω–∏–µ: 
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –ø–æ–¥–±–æ—Ä–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º—É—é –ø–æ–¥–±–æ—Ä–∫—É.
    '''
    request = message.text
    bot_logger.info(f"get a usual collection request {request}")
    get_collections(request[1:])
    collections = 'Bot/collections.json'
    with open(collections, encoding='utf-8') as json_data:
        coll_data = json.load(json_data)
    
    coll = request[1:]
    name = coll_data[coll][0]['name']
    img = coll_data[coll][0]['img']


    await message.answer("–í–∞—à–∞ –ø–æ–¥–±–æ—Ä–∫–∞: ")
    await bot.send_photo(
    message.chat.id,
    photo=img,
    reply_markup=paginator(0, coll),
    caption=name)
    bot_logger.info(f"Sent a collection with name {request[1:]}")

        
# –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –ø—Ä–∏ –≤–≤–æ–¥–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ–∏–ª—å–º–∞
@dp.message()
async def echo(message: Message):
    command_random = False
    if message.text.startswith('/random'):
        modified_message = message.text.replace('/random', '')
        command_random = True
        bot_logger.debug("Catched a /random message")
    else:
        modified_message = message.text
    film = Film(modified_message)
    user_name = str(message.from_user.username)
    film_name = film.get_name()
    if film_name is not None:
        if user_exists(user_name):
            user_update(user_name, film_name)
            bot_logger.info("Sent an update request to the database")
        else:
            user_add(user_name, film_name)
            bot_logger.info("Sent an add request to the database")
            
    if film_name is None:
        await message.answer("–ù–µ –Ω–∞–π–¥–µ–Ω–æ :(")
    else:
        youtube_link = film.youtube_parser()
        urlkb = InlineKeyboardBuilder()
        
        ivi_rating, ivi_link = film.get_ivi_info()
        if ivi_link is not None:
            urlkb.add(types.InlineKeyboardButton(text="ivi", url =str(ivi_link)))
        

        urlkb.add(types.InlineKeyboardButton(text="kinopoisk", url=str(film.get_kinopoisk_url())))
        urlkb.add(types.InlineKeyboardButton(text= "youtube", url = str(youtube_link)))

        zona_link = film.zona_parser()
        if zona_link is not None:
            urlkb.add(types.InlineKeyboardButton(text="zona", url =str(zona_link)))

        anime_link = film.anime_parser()
        if anime_link is not None:
            urlkb.add(types.InlineKeyboardButton(text="anime", url =str(anime_link)))
        
        ans = '<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {} \n<b>–ì–æ–¥ —Å–æ–∑–¥–∞–Ω–∏—è:</b> {} \n<b>–†–µ–π—Ç–∏–Ω–≥:</b> kinopoisk {} \ ivi  {}\n<b>–°—Ç—Ä–∞–Ω–∞:</b> {} \n<b>–í–æ–∑—Ä–∞—Å—Ç:</b> {}'.format(film_name, 
            film.get_year(), film.get_rating(), ivi_rating, ', '.join(film.get_country()), film.get_age())

        await bot.send_photo(chat_id=message.chat.id, photo=film.get_poster_url(), caption=ans, reply_markup=urlkb.as_markup())
        if not command_random:
            other_films_by_request = create_str_list(message.text)
            question = '–í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –∏—Å–∫–∞–ª–∏ –∫–∞–∫–æ–π-—Ç–æ –∏–∑ —ç—Ç–∏—Ö —Ñ–∏–ª—å–º–æ–≤?\n\n' + other_films_by_request
            await message.answer(question)

        await message.answer("–ß—Ç–æ-—Ç–æ –µ—â—ë?", reply_markup=film_kb)

